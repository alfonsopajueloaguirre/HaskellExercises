
module Hoja1 where
import Data.Char;


--A)Dado tres numeros comprobar que estan ordenados de menor a mayor
estaOrdenado::(Int,Int,Int)->Bool
estaOrdenado (x,y,z) = if (x<=y)&&(y<=z) then True else False

--B)Ordenado de menor a mayor 3 numeros
ordenar::(Int,Int,Int)->(Int,Int,Int)
ordenar(x,y,z)
		|estaOrdenado(x,y,z) = (x,y,z)
		|(x<y)=if z<=x then(z,x,y)else(x,z,y)
		|z>=x=(y,x,z)
		|otherwise=if z>=y then(y,z,x)else(z,y,x)
		
--C)Recibe numero real y devuelve una tupla con su parte entera y sus primeros decimales
devuelveReal::Float->(Int,Int)
devuelveReal  r = (truncate(r),truncate(r*100)-100*truncate(r))

--D)Recibe radio de circunferencia y devuelve 2 tuplas con longitud y area del circulo) usando where y no pi
calcularCirculo::Float->(Float,Float)
calcularCirculo r = (2*p*r,p*r^2)
	where p = 3.1416
--Misma funcion con el let
calcularCirculo'::Float->(Float,Float)
calcularCirculo' r = let p=3.1416
	in (2*p*r,p*r^2)
	
--E)Implementar concat utilizando la definicion de listas por compresion (sin recursividad)
concatenar::[[Int]]->[Int]
concatenar lista=[elemento|sublistas<-lista,elemento<-sublistas]

--F)Dado un numero entero devuelva una lista por todos los factores de dicho numero, utilizando listas por compernsion
divisores::Int->[Int]
divisores n = [x|x<-[1..n],n`mod`x==0]
